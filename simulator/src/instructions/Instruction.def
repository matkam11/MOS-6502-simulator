/*
ADC (ADd with Carry)

Affects Flags: S V Z C

MODE           SYNTAX       HEX LEN TIM
Immediate     ADC #$44      $69  2   2
Zero Page     ADC $44       $65  2   3
Zero Page,X   ADC $44,X     $75  2   4
Absolute      ADC $4400     $6D  3   4
Absolute,X    ADC $4400,X   $7D  3   4+
Absolute,Y    ADC $4400,Y   $79  3   4+
Indirect,X    ADC ($44,X)   $61  2   6
Indirect,Y    ADC ($44),Y   $71  2   5+

+ add 1 cycle if page boundary crossed
*/
DEFINST(adc_imm, 0x69, IME, SKIP, SKIP)
DEFINST(adc_zp, 0x65, SKIP, REG, SKIP)
DEFINST(adc_zp_x, 0x75, SKIP, REG, OFFS)
DEFINST(adc_abs, 0x6D, SKIP, REG, SKIP)
DEFINST(adc_abs_x, 0x7D, SKIP, REG, OFFS)
DEFINST(adc_abs_y, 0x79, SKIP, REG, OFFS)
DEFINST(adc_ind_x, 0x61, SKIP, REG, OFFS)
DEFINST(adc_ind_y, 0x71, SKIP, REG, OFFS)


/*
AND (bitwise AND with accumulator)

Affects Flags: S Z

MODE           SYNTAX       HEX LEN TIM
Immediate     AND #$44      $29  2   2
Zero Page     AND $44       $25  2   3
Zero Page,X   AND $44,X     $35  2   4
Absolute      AND $4400     $2D  3   4
Absolute,X    AND $4400,X   $3D  3   4+
Absolute,Y    AND $4400,Y   $39  3   4+
Indirect,X    AND ($44,X)   $21  2   6
Indirect,Y    AND ($44),Y   $31  2   5+

+ add 1 cycle if page boundary crossed
*/
DEFINST(and_imm, 0x29, IME, SKIP, SKIP)
DEFINST(and_zp, 0x25, SKIP, REG, SKIP)
DEFINST(and_zp_x, 0x35, SKIP, REG, OFFS)
DEFINST(and_abs, 0x2D, SKIP, REG, SKIP)
DEFINST(and_abs_x, 0x3D, SKIP, REG, OFFS)
DEFINST(and_abs_y, 0x39, SKIP, REG, OFFS)
DEFINST(and_ind_x, 0x21, SKIP, REG, OFFS)
DEFINST(and_ind_y, 0x31, SKIP, REG, OFFS)


/*
ASL (Arithmetic Shift Left)

Affects Flags: S Z C

MODE           SYNTAX       HEX LEN TIM
Accumulator   ASL A         $0A  1   2
Zero Page     ASL $44       $06  2   5
Zero Page,X   ASL $44,X     $16  2   6
Absolute      ASL $4400     $0E  3   6
Absolute,X    ASL $4400,X   $1E  3   7

ASL shifts all bits left one position. 0 is shifted into bit 0 and the original bit 7 is shifted into the Carry.
*/
DEFINST(asl_acc, 0x0A, SKIP, SKIP, SKIP)
DEFINST(asl_zp, 0x06, SKIP, REG, SKIP)
DEFINST(asl_zp_x, 0x16, SKIP, REG, OFFS)
DEFINST(asl_abs, 0x0E, SKIP, REG, SKIP)
DEFINST(asl_abs_x, 0x11, SKIP, REG, OFFS)


/*
BIT (test BITs)

Affects Flags: N V Z

MODE           SYNTAX       HEX LEN TIM
Zero Page     BIT $44       $24  2   3
Absolute      BIT $4400     $2C  3   4

BIT sets the Z flag as though the value in the address tested were ANDed with the accumulator. The S and V flags are set to match bits 7 and 6 respectively in the value stored at the tested address.
*/
DEFINST(bit_zp, 0x24, SKIP, REG, SKIP)
DEFINST(bit_abs, 0x2C, SKIP, REG, SKIP)


/*
Branch Instructions

Affect Flags: none

All branches are relative mode and have a length of two bytes. Syntax is "Bxx Displacement" or (better) "Bxx Label". See the notes on the Program Counter for more on displacements.

Branches are dependant on the status of the flag bits when the op code is encountered. A branch not taken requires two machine cycles. Add one if the branch is taken and add one more if the branch crosses a page boundary.

MNEMONIC                       HEX
BPL (Branch on PLus)           $10
BMI (Branch on MInus)          $30
BVC (Branch on oVerflow Clear) $50
BVS (Branch on oVerflow Set)   $70
BCC (Branch on Carry Clear)    $90
BCS (Branch on Carry Set)      $B0
BNE (Branch on Not Equal)      $D0
BEQ (Branch on EQual)          $F0
*/
DEFINST(br_on_pl, 0x10, SKIP, SKIP, SKIP)
DEFINST(br_on_mi, 0x30, SKIP, SKIP, SKIP)
DEFINST(br_on_vc, 0x50, SKIP, SKIP, SKIP)
DEFINST(br_on_vs, 0x70, SKIP, SKIP, SKIP)
DEFINST(br_on_cc, 0x90, SKIP, SKIP, SKIP)
DEFINST(br_on_cs, 0xB0, SKIP, SKIP, SKIP)
DEFINST(br_on_ne, 0xD0, SKIP, SKIP, SKIP)
DEFINST(br_on_eq, 0xF0, SKIP, SKIP, SKIP)

/*
BRK (BReaK)

Affects Flags: B

MODE           SYNTAX       HEX LEN TIM
Implied       BRK           $00  1   7

BRK causes a non-maskable interrupt and increments the program counter by one. Therefore an RTI will go to the address of the BRK +2 so that BRK may be used to replace a two-byte instruction for debugging and the subsequent RTI will be correct.
*/
DEFINST(brk, 0x00, SKIP, SKIP, SKIP)

/*
CMP (CoMPare accumulator)

Affects Flags: S Z C

MODE           SYNTAX       HEX LEN TIM
Immediate     CMP #$44      $C9  2   2
Zero Page     CMP $44       $C5  2   3
Zero Page,X   CMP $44,X     $D5  2   4
Absolute      CMP $4400     $CD  3   4
Absolute,X    CMP $4400,X   $DD  3   4+
Absolute,Y    CMP $4400,Y   $D9  3   4+
Indirect,X    CMP ($44,X)   $C1  2   6
Indirect,Y    CMP ($44),Y   $D1  2   5+

+ add 1 cycle if page boundary crossed

Compare sets flags as if a subtraction had been carried out. If the value in the accumulator is equal or greater than the compared value, the Carry will be set. The equal (Z) and sign (S) flags will be set based on equality or lack thereof and the sign (i.e. A>=$80) of the accumulator.
*/
DEFINST(cmp_imm, 0xC9, IME, SKIP, SKIP)
DEFINST(cmp_zp, 0xC5, SKIP, REG, SKIP)
DEFINST(cmp_zp_x, 0xD5, SKIP, REG, OFFS)
DEFINST(cmp_abs, 0xCD, SKIP, REG, SKIP)
DEFINST(cmp_abs_x, 0xDD, SKIP, REG, OFFS)
DEFINST(cmp_abs_y, 0xD9, SKIP, REG, OFFS)
DEFINST(cmp_ind_x, 0xC1, SKIP, REG, OFFS)
DEFINST(cmp_ind_y, 0xD1, SKIP, REG, OFFS)


/*
CPX (ComPare X register)

Affects Flags: S Z C

MODE           SYNTAX       HEX LEN TIM
Immediate     CPX #$44      $E0  2   2
Zero Page     CPX $44       $E4  2   3
Absolute      CPX $4400     $EC  3   4

Operation and flag results are identical to equivalent mode accumulator CMP ops.
*/
DEFINST(cpx_imm, 0xE0, IME, SKIP, SKIP)
DEFINST(cpx_zp, 0xE4, SKIP, REG, SKIP)
DEFINST(cpx_abs, 0xEC, SKIP, REG, SKIP)


/*
CPY (ComPare Y register)

Affects Flags: S Z C

MODE           SYNTAX       HEX LEN TIM
Immediate     CPY #$44      $C0  2   2
Zero Page     CPY $44       $C4  2   3
Absolute      CPY $4400     $CC  3   4
*/
DEFINST(cpy_imm, 0xC0, IME, SKIP, SKIP)
DEFINST(cpy_zp, 0xC4, SKIP, REG, SKIP)
DEFINST(cpy_abs, 0xCC, SKIP, REG, SKIP)

/*
DEC (DECrement memory)

Affects Flags: S Z

MODE           SYNTAX       HEX LEN TIM
Zero Page     DEC $44       $C6  2   5
Zero Page,X   DEC $44,X     $D6  2   6
Absolute      DEC $4400     $CE  3   6
Absolute,X    DEC $4400,X   $DE  3   7
*/
DEFINST(dec_zp, 0xC6, SKIP, REG, SKIP)
DEFINST(dec_zp_x, 0xD6, SKIP, REG, OFFS)
DEFINST(dec_abs, 0xCE, SKIP, REG, SKIP)
DEFINST(dec_abs_x, 0xDE, SKIP, REG, OFFS)

/*
EOR (bitwise Exclusive OR)

Affects Flags: S Z

MODE           SYNTAX       HEX LEN TIM
Immediate     EOR #$44      $49  2   2
Zero Page     EOR $44       $45  2   3
Zero Page,X   EOR $44,X     $55  2   4
Absolute      EOR $4400     $4D  3   4
Absolute,X    EOR $4400,X   $5D  3   4+
Absolute,Y    EOR $4400,Y   $59  3   4+
Indirect,X    EOR ($44,X)   $41  2   6
Indirect,Y    EOR ($44),Y   $51  2   5+

+ add 1 cycle if page boundary crossed
*/
DEFINST(eor_imm, 0x49, IME, SKIP, SKIP)
DEFINST(eor_zp, 0x45, SKIP, REG, SKIP)
DEFINST(eor_zp_x, 0x55, SKIP, REG, OFFS)
DEFINST(eor_abs, 0x4D, SKIP, REG, SKIP)
DEFINST(eor_abs_x, 0x5D, SKIP, REG, OFFS)
DEFINST(eor_abs_y, 0x59, SKIP, REG, OFFS)
DEFINST(eor_ind_x, 0x41, SKIP, REG, OFFS)
DEFINST(eor_ind_y, 0x51, SKIP, REG, OFFS)


/*
Flag (Processor Status) Instructions

Affect Flags: as noted

These instructions are implied mode, have a length of one byte and require two machine cycles.

MNEMONIC                       HEX
CLC (CLear Carry)              $18
SEC (SEt Carry)                $38
CLI (CLear Interrupt)          $58
SEI (SEt Interrupt)            $78
CLV (CLear oVerflow)           $B8
CLD (CLear Decimal)            $D8
SED (SEt Decimal)              $F8
*/
DEFINST(flag_clc, 0x18, SKIP, SKIP, SKIP)
DEFINST(flag_sec, 0x38, SKIP, SKIP, SKIP)
DEFINST(flag_cli, 0x58, SKIP, SKIP, SKIP)
DEFINST(flag_sei, 0x78, SKIP, SKIP, SKIP)
DEFINST(flag_clv, 0xB8, SKIP, SKIP, SKIP)
DEFINST(flag_cld, 0xC8, SKIP, SKIP, SKIP)
DEFINST(flag_sed, 0xD8, SKIP, SKIP, SKIP)


/*
INC (INCrement memory)

Affects Flags: S Z

MODE           SYNTAX       HEX LEN TIM
Zero Page     INC $44       $E6  2   5
Zero Page,X   INC $44,X     $F6  2   6
Absolute      INC $4400     $EE  3   6
Absolute,X    INC $4400,X   $FE  3   7
*/
DEFINST(inc_zp, 0xE6, SKIP, REG, SKIP)
DEFINST(inc_zp_x, 0xF6, SKIP, REG, OFFS)
DEFINST(inc_abs, 0xEE, SKIP, REG, SKIP)
DEFINST(inc_abs_x, 0xFE, SKIP, REG, OFFS)


/*
JMP (JuMP)

Affects Flags: none

MODE           SYNTAX       HEX LEN TIM
Absolute      JMP $5597     $4C  3   3
Indirect      JMP ($5597)   $6C  3   5

JMP transfers program execution to the following address (absolute) or to the location contained in the following address (indirect). Note that there is no carry associated with the indirect jump so:
AN INDIRECT JUMP MUST NEVER USE A


VECTOR BEGINNING ON THE LAST BYTE


OF A PAGE
*/
DEFINST(jmp_abs, 0x4C, IME, SKIP, SKIP)
DEFINST(jmp_ind, 0x6C, IME, SKIP, SKIP)


/*
JSR (Jump to SubRoutine)

Affects Flags: none

MODE           SYNTAX       HEX LEN TIM
Absolute      JSR $5597     $20  3   6

JSR pushes the address-1 of the next operation on to the stack before transferring program control to the following address. Subroutines are normally terminated by a RTS op code.
*/
DEFINST(jsr_abs, 0x20, IME, SKIP, SKIP)


/*
LDA (LoaD Accumulator)

Affects Flags: S Z

MODE           SYNTAX       HEX LEN TIM
Immediate     LDA #$44      $A9  2   2
Zero Page     LDA $44       $A5  2   3
Zero Page,X   LDA $44,X     $B5  2   4
Absolute      LDA $4400     $AD  3   4
Absolute,X    LDA $4400,X   $BD  3   4+
Absolute,Y    LDA $4400,Y   $B9  3   4+
Indirect,X    LDA ($44,X)   $A1  2   6
Indirect,Y    LDA ($44),Y   $B1  2   5+

+ add 1 cycle if page boundary crossed
*/
DEFINST(lda_imm, 0xA9, IME, SKIP, SKIP)
DEFINST(lda_zp, 0xA5, SKIP, REG, SKIP)
DEFINST(lda_zp_x, 0xB5, SKIP, REG, OFFS)
DEFINST(lda_abs, 0xAD, SKIP, REG, SKIP)
DEFINST(lda_abs_x, 0xBD, SKIP, REG, OFFS)
DEFINST(lda_abs_y, 0xB9, SKIP, REG, OFFS)
DEFINST(lda_ind_x, 0xA1, SKIP, REG, OFFS)
DEFINST(lda_ind_y, 0xB1, SKIP, REG, OFFS)


/*
LDX (LoaD X register)

Affects Flags: S Z

MODE           SYNTAX       HEX LEN TIM
Immediate     LDX #$44      $A2  2   2
Zero Page     LDX $44       $A6  2   3
Zero Page,Y   LDX $44,Y     $B6  2   4
Absolute      LDX $4400     $AE  3   4
Absolute,Y    LDX $4400,Y   $BE  3   4+

+ add 1 cycle if page boundary crossed
*/
DEFINST(ldx_imm, 0xA2, IME, SKIP, SKIP)
DEFINST(ldx_zp, 0xA6, SKIP, REG, SKIP)
DEFINST(ldx_zp_x, 0xB6, SKIP, REG, OFFS)
DEFINST(ldx_abs, 0xAE, SKIP, REG, SKIP)
DEFINST(ldx_abs_x, 0xBE, SKIP, REG, OFFS)


/*
LDY (LoaD Y register)

Affects Flags: S Z

MODE           SYNTAX       HEX LEN TIM
Immediate     LDY #$44      $A0  2   2
Zero Page     LDY $44       $A4  2   3
Zero Page,X   LDY $44,X     $B4  2   4
Absolute      LDY $4400     $AC  3   4
Absolute,X    LDY $4400,X   $BC  3   4+

+ add 1 cycle if page boundary crossed
*/
DEFINST(ldy_imm, 0xA0, IME, SKIP, SKIP)
DEFINST(ldy_zp, 0xA4, SKIP, REG, SKIP)
DEFINST(ldy_zp_x, 0xB4, SKIP, REG, OFFS)
DEFINST(ldy_abs, 0xAC, SKIP, REG, SKIP)
DEFINST(ldy_abs_x, 0xBC, SKIP, REG, OFFS)


/*
LSR (Logical Shift Right)

Affects Flags: S Z C

MODE           SYNTAX       HEX LEN TIM
Accumulator   LSR A         $4A  1   2
Zero Page     LSR $44       $46  2   5
Zero Page,X   LSR $44,X     $56  2   6
Absolute      LSR $4400     $4E  3   6
Absolute,X    LSR $4400,X   $5E  3   7

LSR shifts all bits right one position. 0 is shifted into bit 7 and the original bit 0 is shifted into the Carry.
*/
DEFINST(lsr_acc, 0x4A, SKIP, SKIP, SKIP)
DEFINST(lsr_zp, 0x46, SKIP, REG, SKIP)
DEFINST(lsr_zp_x, 0x56, SKIP, REG, OFFS)
DEFINST(lsr_abs, 0x4E, SKIP, REG, SKIP)
DEFINST(lsr_abs_x, 0x5E, SKIP, REG, OFFS)


/*
ORA (bitwise OR with Accumulator)

Affects Flags: S Z

MODE           SYNTAX       HEX LEN TIM
Immediate     ORA #$44      $09  2   2
Zero Page     ORA $44       $05  2   3
Zero Page,X   ORA $44,X     $15  2   4
Absolute      ORA $4400     $0D  3   4
Absolute,X    ORA $4400,X   $1D  3   4+
Absolute,Y    ORA $4400,Y   $19  3   4+
Indirect,X    ORA ($44,X)   $01  2   6
Indirect,Y    ORA ($44),Y   $11  2   5+

+ add 1 cycle if page boundary crossed
*/
DEFINST(ora_imm, 0x09, IME, SKIP, SKIP)
DEFINST(ora_zp, 0x05, SKIP, REG, SKIP)
DEFINST(ora_zp_x, 0x15, SKIP, REG, OFFS)
DEFINST(ora_abs, 0x0D, SKIP, REG, SKIP)
DEFINST(ora_abs_x, 0x1D, SKIP, REG, OFFS)
DEFINST(ora_abs_y, 0x19, SKIP, REG, OFFS)
DEFINST(ora_ind_x, 0x01, SKIP, REG, OFFS)
DEFINST(ora_ind_y, 0x11, SKIP, REG, OFFS)


/*
Register Instructions

Affect Flags: S Z

These instructions are implied mode, have a length of one byte and require two machine cycles.

MNEMONIC                 HEX
TAX (Transfer A to X)    $AA
TXA (Transfer X to A)    $8A
DEX (DEcrement X)        $CA
INX (INcrement X)        $E8
TAY (Transfer A to Y)    $A8
TYA (Transfer Y to A)    $98
DEY (DEcrement Y)        $88
INY (INcrement Y)        $C8
*/
DEFINST(tax_a_x, 0xAA, SKIP, SKIP, SKIP)
DEFINST(txa_x_a, 0x8A, SKIP, SKIP, SKIP)
DEFINST(dex_x, 0xCA, SKIP, SKIP, SKIP)
DEFINST(inx_x, 0xE8, SKIP, SKIP, SKIP)
DEFINST(tay_a_y, 0xA8, SKIP, SKIP, SKIP)
DEFINST(tya_y_a, 0x98, SKIP, SKIP, SKIP)
DEFINST(dey_y, 0x88, SKIP, SKIP, SKIP)
DEFINST(iny_y, 0xC8, SKIP, SKIP, SKIP)




/*
ROL (ROtate Left)

Affects Flags: S Z C

MODE           SYNTAX       HEX LEN TIM
Accumulator   ROL A         $2A  1   2
Zero Page     ROL $44       $26  2   5
Zero Page,X   ROL $44,X     $36  2   6
Absolute      ROL $4400     $2E  3   6
Absolute,X    ROL $4400,X   $3E  3   7

ROL shifts all bits left one position. The Carry is shifted into bit 0 and the original bit 7 is shifted into the Carry.
*/
DEFINST(rol_acc, 0x2A, SKIP, SKIP, SKIP)
DEFINST(rol_zp, 0x26, SKIP, REG, SKIP)
DEFINST(rol_zp_x, 0x36, SKIP, REG, OFFS)
DEFINST(rol_abs, 0x2E, SKIP, REG, SKIP)
DEFINST(rol_abs_x, 0x3E, SKIP, REG, OFFS)



/*
ROR (ROtate Right)

Affects Flags: S Z C

MODE           SYNTAX       HEX LEN TIM
Accumulator   ROR A         $6A  1   2
Zero Page     ROR $44       $66  2   5
Zero Page,X   ROR $44,X     $76  2   6
Absolute      ROR $4400     $6E  3   6
Absolute,X    ROR $4400,X   $7E  3   7

ROR shifts all bits right one position. The Carry is shifted into bit 7 and the original bit 0 is shifted into the Carry.
*/
DEFINST(ror_acc, 0x6A, SKIP, SKIP, SKIP)
DEFINST(ror_zp, 0x66, SKIP, REG, SKIP)
DEFINST(ror_zp_x, 0x76, SKIP, REG, OFFS)
DEFINST(ror_abs, 0x6E, SKIP, REG, SKIP)
DEFINST(ror_abs_x, 0x7E, SKIP, REG, OFFS)




/*
RTI (ReTurn from Interrupt)

Affects Flags: all

MODE           SYNTAX       HEX LEN TIM
Implied       RTI           $40  1   6

RTI retrieves the Processor Status Word (flags) and the Program Counter from the stack in that order (interrupts push the PC first and then the PSW).
Note that unlike RTS, the return address on the stack is the actual address rather than the address-1.
*/
DEFINST(rti, 0x40, SKIP, SKIP, SKIP)




/*
RTS (ReTurn from Subroutine)

Affects Flags: none

MODE           SYNTAX       HEX LEN TIM
Implied       RTS           $60  1   6

RTS pulls the top two bytes off the stack (low byte first) and transfers program control to that address+1. It is used, as expected, to exit a subroutine invoked via JSR which pushed the address-1.
*/
DEFINST(rts, 0x60, SKIP, SKIP, SKIP)





/*
SBC (SuBtract with Carry)

Affects Flags: S V Z C

MODE           SYNTAX       HEX LEN TIM
Immediate     SBC #$44      $E9  2   2
Zero Page     SBC $44       $E5  2   3
Zero Page,X   SBC $44,X     $F5  2   4
Absolute      SBC $4400     $ED  3   4
Absolute,X    SBC $4400,X   $FD  3   4+
Absolute,Y    SBC $4400,Y   $F9  3   4+
Indirect,X    SBC ($44,X)   $E1  2   6
Indirect,Y    SBC ($44),Y   $F1  2   5+

+ add 1 cycle if page boundary crossed

SBC results are dependant on the setting of the decimal flag. In decimal mode, subtraction is carried out on the assumption that the values involved are packed BCD (Binary Coded Decimal).
There is no way to subtract without the carry which works as an inverse borrow. i.e, to subtract you set the carry before the operation. If the carry is cleared by the operation, it indicates a borrow occurred.
*/
DEFINST(sbc_imm, 0xE9, IME, SKIP, SKIP)
DEFINST(sbc_zp, 0xE5, SKIP, REG, SKIP)
DEFINST(sbc_zp_x, 0xF5, SKIP, REG, OFFS)
DEFINST(sbc_abs, 0xED, SKIP, REG, SKIP)
DEFINST(sbc_abs_x, 0xFD, SKIP, REG, OFFS)
DEFINST(sbc_abs_y, 0xF9, SKIP, REG, OFFS)
DEFINST(sbc_ind_x, 0xE1, SKIP, REG, OFFS)
DEFINST(sbc_ind_y, 0xF1, SKIP, REG, OFFS)




/*
STA (STore Accumulator)

Affects Flags: none

MODE           SYNTAX       HEX LEN TIM
Zero Page     STA $44       $85  2   3
Zero Page,X   STA $44,X     $95  2   4
Absolute      STA $4400     $8D  3   4
Absolute,X    STA $4400,X   $9D  3   5
Absolute,Y    STA $4400,Y   $99  3   5
Indirect,X    STA ($44,X)   $81  2   6
Indirect,Y    STA ($44),Y   $91  2   6
*/
DEFINST(sta_zp, 0x85, SKIP, REG, SKIP)
DEFINST(sta_zp_x, 0x95, SKIP, REG, OFFS)
DEFINST(sta_abs, 0x8D, SKIP, REG, SKIP)
DEFINST(sta_abs_x, 0x9D, SKIP, REG, OFFS)
DEFINST(sta_abs_y, 0x99, SKIP, REG, OFFS)
DEFINST(sta_ind_x, 0x81, SKIP, REG, OFFS)
DEFINST(sta_ind_y, 0x91, SKIP, REG, OFFS)

/*
Stack Instructions

These instructions are implied mode, have a length of one byte and require machine cycles as indicated. The "PuLl" operations are known as "POP" on most other microprocessors. With the 6502, the stack is always on page one ($100-$1FF) and works top down.

MNEMONIC                        HEX TIM
TXS (Transfer X to Stack ptr)   $9A  2
TSX (Transfer Stack ptr to X)   $BA  2
PHA (PusH Accumulator)          $48  3
PLA (PuLl Accumulator)          $68  4
PHP (PusH Processor status)     $08  3
PLP (PuLl Processor status)     $28  4
*/
DEFINST(txs_x_sp, 0x9A, SKIP, SKIP, SKIP)
DEFINST(tsx_sp_x, 0xBA, SKIP, SKIP, SKIP)
DEFINST(pha_x_sp, 0x48, SKIP, SKIP, SKIP)
DEFINST(pla_x_sp, 0x68, SKIP, SKIP, SKIP)
DEFINST(php_x_sp, 0x08, SKIP, SKIP, SKIP)
DEFINST(plp_x_sp, 0x28, SKIP, SKIP, SKIP)


/*
STX (STore X register)

Affects Flags: none

MODE           SYNTAX       HEX LEN TIM
Zero Page     STX $44       $86  2   3
Zero Page,Y   STX $44,Y     $96  2   4
Absolute      STX $4400     $8E  3   4
*/
DEFINST(sty_zp, 0x86, SKIP, REG, SKIP)
DEFINST(sty_zp_x, 0x96, SKIP, REG, OFFS)
DEFINST(sty_abs, 0x8e, SKIP, REG, SKIP)





/*
STY (STore Y register)

Affects Flags: none

MODE           SYNTAX       HEX LEN TIM
Zero Page     STY $44       $84  2   3
Zero Page,X   STY $44,X     $94  2   4
Absolute      STY $4400     $8C  3   4
*/
DEFINST(sty_zp, 0x84, SKIP, REG, SKIP)
DEFINST(sty_zp_x, 0x94, SKIP, REG, OFFS)
DEFINST(sty_abs, 0x8C, SKIP, REG, SKIP)
